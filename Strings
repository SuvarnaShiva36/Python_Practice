* A string can be anything which is lying inside single quotes, double quotes or triple quotes.
    For Example,
    print("SuvarnaShiva")
    # Output: SuvarnaShiva

* String has many built-in functions which can assign,add,delete and many other things.

* Square brackets can be used to access elements of the string. We can use negative numbers to print the last.
    For Example,
    a = "Padmashree"
    print(a[3], a[-1])
    # Output: m,e
Here, it will print the third letter from the string. Indexing starts from 0.

* Length of the string includes whitespaces,punctuations everything which is inside the quotes.

* You can return a range of characters by using the slice syntax.Specify the start index and the end index, separated
 by a colon, to return a part of the string.
    For Example,
    p = "PadmaShree"        s = "SuvarnaShiva"
    print(p[2:8])           print(s[3:9:2])
    # Output: dmaShr        # Output:

* Unlike Java, we cant concatenate strings with integer or float. For this we have one method named format().
    For Example,
    s = "Shiva"
    a = 0
    print(s + a)            # This gives an error stating string cannot concatenate with an integer
    print(s + format(a))    # This gives an output of Shiva0

* Escape Character to print illegal characters in a string
    For Example,
    print(""This will give error"")
    # Here, i want to print this will give error in double quotes which gives me error so
    now you can use escape characters to get the sentence printed in double quotes.
    print("\"This will not give error\"")

* Other escape characters used:
    Code	Result
    \'	    Single Quote
    \\	    Backslash
    \n	    New Line
    \r	    Carriage Return
    \t	    Tab
    \b	    Backspace
    \f	    Form Feed
    \ooo	Octal value
    \xhh	Hex value

* Below are some of the built-in string methods which can be used in daily code.
    Method	                    Description
    capitalize()	            Converts the first character to upper case
    casefold()	                Converts string into lower case
    center()	                Returns a centered string
    count()	                    Returns the number of times a specified value occurs in a string
    encode()	                Returns an encoded version of the string
    endswith()	                Returns true if the string ends with the specified value
    expandtabs()	            Sets the tab size of the string
    find()	                    Searches the string for a specified value and returns the position of where it was found
    format()	                Formats specified values in a string
    format_map()	            Formats specified values in a string
    index()	                    Searches the string for a specified value and returns the position of where it was found
    isalnum()	                Returns True if all characters in the string are alphanumeric
    isalpha()	                Returns True if all characters in the string are in the alphabet
    isascii()	                Returns True if all characters in the string are ascii characters
    isdecimal()	                Returns True if all characters in the string are decimals
    isdigit()	                Returns True if all characters in the string are digits
    isidentifier()	            Returns True if the string is an identifier
    islower()	                Returns True if all characters in the string are lower case
    isnumeric()	                Returns True if all characters in the string are numeric
    isprintable()	            Returns True if all characters in the string are printable
    isspace()	                Returns True if all characters in the string are whitespaces
    istitle()	                Returns True if the string follows the rules of a title
    isupper()	                Returns True if all characters in the string are upper case
    join()	                    Converts the elements of an iterable into a string
    ljust()	                    Returns a left justified version of the string
    lower()	                    Converts a string into lower case
    lstrip()	                Returns a left trim version of the string
    maketrans()	                Returns a translation table to be used in translations
    partition()	                Returns a tuple where the string is parted into three parts
    replace()	                Returns a string where a specified value is replaced with a specified value
    rfind()	                    Searches the string for a specified value and returns the last position of where it was found
    rindex()	                Searches the string for a specified value and returns the last position of where it was found
    rjust()	                    Returns a right justified version of the string
    rpartition()	            Returns a tuple where the string is parted into three parts
    rsplit()	                Splits the string at the specified separator, and returns a list
    rstrip()	                Returns a right trim version of the string
    split()	                    Splits the string at the specified separator, and returns a list
    splitlines()	            Splits the string at line breaks and returns a list
    startswith()	            Returns true if the string starts with the specified value
    strip()	                    Returns a trimmed version of the string
    swapcase()	                Swaps cases, lower case becomes upper case and vice versa
    title()	                    Converts the first character of each word to upper case
    translate()	                Returns a translated string
    upper()	                    Converts a string into upper case
    zfill()	                    Fills the string with a specified number of 0 values at the beginning

Note: All string methods returns new values. They do not change the original string.